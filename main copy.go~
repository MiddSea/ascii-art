package main

import (
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"golang.org/x/text/transform"
)

func main() {
	if len(os.Args) != 3 {
		fmt.Println("Usage: go run . input.txt output.txt")
		os.Exit(1)
	}

	input := os.Args[1]
	output := os.Args[2]

	content, err := os.ReadFile(input)
	if err != nil {
		fmt.Printf("Error reading file: %v\n", err)
		os.Exit(1)
	}

	processedText := processText(string(content))

	err = os.WriteFile(output, []byte(processedText), 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
		os.Exit(1)
	}
}

func processText(text string) string {
	// Convert hex and binary numbers
	text = processHexNumbers(text)
	text = processBinNumbers(text)

	// Handle text transformations
	text = processTextTransformations(text)

	// Fix articles (a/an)
	text = fixArticles(text)

	// Fix punctuation
	text = fixPunctuation(text)

	// Handle quotes
	text = fixQuotes(text)

	return strings.TrimSpace(text)
}

func processHexNumbers(text string) string {
	re := regexp.MustCompile(`(\w+)\s*\(hex\)`)
	return re.ReplaceAllStringFunc(text, func(match string) string {
		parts := re.FindStringSubmatch(match)
		hexNum := parts[1]
		decimal, err := strconv.ParseInt(hexNum, 16, 64)
		if err != nil {
			return match
		}
		return fmt.Sprintf("%d", decimal)
	})
}

func processBinNumbers(text string) string {
	re := regexp.MustCompile(`(\w+)\s*\(bin\)`)
	return re.ReplaceAllStringFunc(text, func(match string) string {
		parts := re.FindStringSubmatch(match)
		binNum := parts[1]
		decimal, err := strconv.ParseInt(binNum, 2, 64)
		if err != nil {
			return match
		}
		return fmt.Sprintf("%d", decimal)
	})
}

func processTextTransformations(text string) string {
	// Process (up) transformation
	// upRegex := regexp.MustCompile(`(\w+)\s*\(up(?:,\s*(\d+))?\)`)
	upRegex := regexp.MustCompile(`((?:\w+(?:\s+\w+)*?))\s*\(up(?:,\s*(\d+))?\)`)
	text = upRegex.ReplaceAllStringFunc(text, func(match string) string {
		parts := upRegex.FindStringSubmatch(match)
		// word := parts[1]
		words := strings.Fields(parts[1])
		count := 1
		if len(parts) > 2 && parts[2] != "" {
			count, _ = strconv.Atoi(parts[2])
		}
		//	words := strings.Fields(word)
		// for i := 0; i < count && i < len(words); i++ {
		// now count from back
		startIdx := len(words) - count
		if startIdx < 0 {
			startIdx = 0
		}
		for i := startIdx; i < len(words); i++ {
	
			words[i] = strings.ToUpper(words[i])
		}
		return strings.Join(words, " ")
	})

	// Process (low) transformation
	// lowRegex := regexp.MustCompile(`(\w+)\s*\(low(?:,\s*(\d+))?\)`)
	lowRegex := regexp.MustCompile(`((?:\w+(?:\s+\w+)*?))\s*\(low(?:,\s*(\d+))?\)`)
	text = lowRegex.ReplaceAllStringFunc(text, func(match string) string {
		parts := lowRegex.FindStringSubmatch(match)
		words := strings.Fields(parts[1])
		// word := parts[1]
		count := 1
		if len(parts) > 2 && parts[2] != "" {
			count, _ = strconv.Atoi(parts[2])
		}
		// words := strings.Fields(word)
		//for i := 0; i < count && i < len(words); i++ {
		startIdx := len(words) - count
		if startIdx < 0 {
			startIdx = 0
		}
		for i := startIdx; i < len(words); i++ {	
			words[i] = strings.ToLower(words[i])
		}
		return strings.Join(words, " ")
	})

	// Process (cap) transformation
	// capRegex := regexp.MustCompile(`(\w+)\s*\(cap(?:,\s*(\d+))?\)`)
	// text = capRegex.ReplaceAllStringFunc(text, func(match string) string {
		capRegex := regexp.MustCompile(`((?:\w+(?:\s+\w+)*?))\s*\(cap(?:,\s*(\d+))?\)`)
		text = capRegex.ReplaceAllStringFunc(text, func(match string) string {
			parts := capRegex.FindStringSubmatch(match)
			words := strings.Fields(parts[1])
			count := 1
		if len(parts) > 2 && parts[2] != "" {
			count, _ = strconv.Atoi(parts[2])
		}
		// words := strings.Fields(word)startIdx := len(words) - count
		startIdx := len(words) - count
		if startIdx < 0 {
			startIdx = 0
		}
		for i := startIdx; i < len(words); i++ {
			words[i] = strings.Title(strings.ToLower(words[i]))
		}
		return strings.Join(words, " ")
	})

	return text
}

func fixArticles(text string) string {
	re := regexp.MustCompile(`\ba\s+([aeiouAEIOUhH]\w+)`)
	return re.ReplaceAllString(text, "an $1")
}

func fixPunctuation(text string) string {
	// Handle special punctuation groups first
	text = regexp.MustCompile(`\.\.\.`).ReplaceAllString(text, "...")
	text = regexp.MustCompile(`\s*\.\.\.\s*`).ReplaceAllString(text, "... ")
	text = regexp.MustCompile(`\s*\!\?\s*`).ReplaceAllString(text, "!? ")

	// Handle single punctuation marks
	punctuations := []string{",", ".", "!", "?", ":", ";"}
	for _, p := range punctuations {
		text = regexp.MustCompile(`\s*`+regexp.QuoteMeta(p)+`\s*`).ReplaceAllString(text, p+" ")
	}

	return strings.TrimSpace(text)
}

func fixQuotes(text string) string {
	re := regexp.MustCompile(`'\s*(.*?)\s*'`)
	return re.ReplaceAllString(text, "'$1'")
}
