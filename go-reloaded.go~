package main

import (
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
)

// ... [previous unchanged code remains the same until processTextTransformations] ...

func processTextTransformations(text string) string {
	// Process (up) transformation with proper word counting
	upRegex := regexp.MustCompile(`((?:\w+(?:\s+\w+)*?))\s*\(up(?:,\s*(\d+))?\)`)
	text = upRegex.ReplaceAllStringFunc(text, func(match string) string {
		parts := upRegex.FindStringSubmatch(match)
		words := strings.Fields(parts[1])
		count := 1
		if len(parts) > 2 && parts[2] != "" {
			count, _ = strconv.Atoi(parts[2])
		}
		// Count from the end of the word slice
		startIdx := len(words) - count
		if startIdx < 0 {
			startIdx = 0
		}
		for i := startIdx; i < len(words); i++ {
			words[i] = strings.ToUpper(words[i])
		}
		return strings.Join(words, " ")
	})

	// Process (low) transformation
	lowRegex := regexp.MustCompile(`((?:\w+(?:\s+\w+)*?))\s*\(low(?:,\s*(\d+))?\)`)
	text = lowRegex.ReplaceAllStringFunc(text, func(match string) string {
		parts := lowRegex.FindStringSubmatch(match)
		words := strings.Fields(parts[1])
		count := 1
		if len(parts) > 2 && parts[2] != "" {
			count, _ = strconv.Atoi(parts[2])
		}
		startIdx := len(words) - count
		if startIdx < 0 {
			startIdx = 0
		}
		for i := startIdx; i < len(words); i++ {
			words[i] = strings.ToLower(words[i])
		}
		return strings.Join(words, " ")
	})

	// Process (cap) transformation
	capRegex := regexp.MustCompile(`((?:\w+(?:\s+\w+)*?))\s*\(cap(?:,\s*(\d+))?\)`)
	text = capRegex.ReplaceAllStringFunc(text, func(match string) string {
		parts := capRegex.FindStringSubmatch(match)
		words := strings.Fields(parts[1])
		count := 1
		if len(parts) > 2 && parts[2] != "" {
			count, _ = strconv.Atoi(parts[2])
		}
		startIdx := len(words) - count
		if startIdx < 0 {
			startIdx = 0
		}
		for i := startIdx; i < len(words); i++ {
			words[i] = strings.Title(strings.ToLower(words[i]))
		}
		return strings.Join(words, " ")
	})

	return text
}

func fixPunctuation(text string) string {
	// Handle ellipsis properly
	text = regexp.MustCompile(`\.\.\.`).ReplaceAllString(text, "...")
	text = regexp.MustCompile(`\s*\.\.\.\s*`).ReplaceAllString(text, "... ")
	
	// Handle other special punctuation groups
	text = regexp.MustCompile(`\s*\!\?\s*`).ReplaceAllString(text, "!? ")

	// Handle single punctuation marks
	punctuations := []string{",", ".", "!", "?", ":", ";"}
	for _, p := range punctuations {
		text = regexp.MustCompile(`\s*`+regexp.QuoteMeta(p)+`\s*`).ReplaceAllString(text, p+" ")
	}

	return strings.TrimSpace(text)
}

func fixQuotes(text string) string {
	// Improved quote handling to properly handle spaces
	re := regexp.MustCompile(`'\s*(.*?)\s*'`)
	return re.ReplaceAllString(text, "'$1'")
}

// ... [rest of the code remains the same] ...
